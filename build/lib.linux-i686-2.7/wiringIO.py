# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_wiringIO', [dirname(__file__)])
        except ImportError:
            import _wiringIO
            return _wiringIO
        if fp is not None:
            try:
                _mod = imp.load_module('_wiringIO', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _wiringIO = swig_import_helper()
    del swig_import_helper
else:
    import _wiringIO
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


UART0 = _wiringIO.UART0
UART1 = _wiringIO.UART1
UART2 = _wiringIO.UART2
UART3 = _wiringIO.UART3
UART4 = _wiringIO.UART4
INPUT = _wiringIO.INPUT
OUTPUT = _wiringIO.OUTPUT
PWM_OUTPUT = _wiringIO.PWM_OUTPUT
PULLUP = _wiringIO.PULLUP
PULLDOWN = _wiringIO.PULLDOWN
PULLOFF = _wiringIO.PULLOFF
CHECK = _wiringIO.CHECK
LOW = _wiringIO.LOW
HIGH = _wiringIO.HIGH

def wiringPiSetup():
  return _wiringIO.wiringPiSetup()
wiringPiSetup = _wiringIO.wiringPiSetup

def wiringPiSetupSys():
  return _wiringIO.wiringPiSetupSys()
wiringPiSetupSys = _wiringIO.wiringPiSetupSys

def wiringPiSetupGpio():
  return _wiringIO.wiringPiSetupGpio()
wiringPiSetupGpio = _wiringIO.wiringPiSetupGpio

def wiringPiSetupPhys():
  return _wiringIO.wiringPiSetupPhys()
wiringPiSetupPhys = _wiringIO.wiringPiSetupPhys

def piFaceSetup(*args):
  return _wiringIO.piFaceSetup(*args)
piFaceSetup = _wiringIO.piFaceSetup

def pinMode(*args):
  return _wiringIO.pinMode(*args)
pinMode = _wiringIO.pinMode

def pullUpDnControl(*args):
  return _wiringIO.pullUpDnControl(*args)
pullUpDnControl = _wiringIO.pullUpDnControl

def digitalRead(*args):
  return _wiringIO.digitalRead(*args)
digitalRead = _wiringIO.digitalRead

def digitalWrite(*args):
  return _wiringIO.digitalWrite(*args)
digitalWrite = _wiringIO.digitalWrite

def pwmWrite(*args):
  return _wiringIO.pwmWrite(*args)
pwmWrite = _wiringIO.pwmWrite

def analogRead(*args):
  return _wiringIO.analogRead(*args)
analogRead = _wiringIO.analogRead

def analogWrite(*args):
  return _wiringIO.analogWrite(*args)
analogWrite = _wiringIO.analogWrite

def piBoardRev():
  return _wiringIO.piBoardRev()
piBoardRev = _wiringIO.piBoardRev

def wpiPinToGpio(*args):
  return _wiringIO.wpiPinToGpio(*args)
wpiPinToGpio = _wiringIO.wpiPinToGpio

def setPadDrive(*args):
  return _wiringIO.setPadDrive(*args)
setPadDrive = _wiringIO.setPadDrive

def getAlt(*args):
  return _wiringIO.getAlt(*args)
getAlt = _wiringIO.getAlt

def digitalWriteByte(*args):
  return _wiringIO.digitalWriteByte(*args)
digitalWriteByte = _wiringIO.digitalWriteByte

def pwmSetMode(*args):
  return _wiringIO.pwmSetMode(*args)
pwmSetMode = _wiringIO.pwmSetMode

def pwmSetRange(*args):
  return _wiringIO.pwmSetRange(*args)
pwmSetRange = _wiringIO.pwmSetRange

def pwmSetClock(*args):
  return _wiringIO.pwmSetClock(*args)
pwmSetClock = _wiringIO.pwmSetClock

def gpioClockSet(*args):
  return _wiringIO.gpioClockSet(*args)
gpioClockSet = _wiringIO.gpioClockSet

def wiringPiISR(*args):
  return _wiringIO.wiringPiISR(*args)
wiringPiISR = _wiringIO.wiringPiISR

def piThreadCreate(*args):
  return _wiringIO.piThreadCreate(*args)
piThreadCreate = _wiringIO.piThreadCreate

def piLock(*args):
  return _wiringIO.piLock(*args)
piLock = _wiringIO.piLock

def piUnlock(*args):
  return _wiringIO.piUnlock(*args)
piUnlock = _wiringIO.piUnlock

def piHiPri(*args):
  return _wiringIO.piHiPri(*args)
piHiPri = _wiringIO.piHiPri

def delay(*args):
  return _wiringIO.delay(*args)
delay = _wiringIO.delay

def delayMicroseconds(*args):
  return _wiringIO.delayMicroseconds(*args)
delayMicroseconds = _wiringIO.delayMicroseconds

def millis():
  return _wiringIO.millis()
millis = _wiringIO.millis

def micros():
  return _wiringIO.micros()
micros = _wiringIO.micros

def SerialBegin(*args):
  return _wiringIO.SerialBegin(*args)
SerialBegin = _wiringIO.SerialBegin

def SerialEnd(*args):
  return _wiringIO.SerialEnd(*args)
SerialEnd = _wiringIO.SerialEnd

def SerialFlush(*args):
  return _wiringIO.SerialFlush(*args)
SerialFlush = _wiringIO.SerialFlush

def SerialWrite(*args):
  return _wiringIO.SerialWrite(*args)
SerialWrite = _wiringIO.SerialWrite

def SerialPrint(*args):
  return _wiringIO.SerialPrint(*args)
SerialPrint = _wiringIO.SerialPrint

def SerialPrintln(*args):
  return _wiringIO.SerialPrintln(*args)
SerialPrintln = _wiringIO.SerialPrintln

def serialPrintf(*args):
  return _wiringIO.serialPrintf(*args)
serialPrintf = _wiringIO.serialPrintf

def SerialAvailable(*args):
  return _wiringIO.SerialAvailable(*args)
SerialAvailable = _wiringIO.SerialAvailable

def SerialRead(*args):
  return _wiringIO.SerialRead(*args)
SerialRead = _wiringIO.SerialRead

def shiftOut(*args):
  return _wiringIO.shiftOut(*args)
shiftOut = _wiringIO.shiftOut

def shiftIn(*args):
  return _wiringIO.shiftIn(*args)
shiftIn = _wiringIO.shiftIn

def wiringPiSPIGetFd(*args):
  return _wiringIO.wiringPiSPIGetFd(*args)
wiringPiSPIGetFd = _wiringIO.wiringPiSPIGetFd

def wiringPiSPIDataRW(*args):
  return _wiringIO.wiringPiSPIDataRW(*args)
wiringPiSPIDataRW = _wiringIO.wiringPiSPIDataRW

def wiringPiSPISetup(*args):
  return _wiringIO.wiringPiSPISetup(*args)
wiringPiSPISetup = _wiringIO.wiringPiSPISetup

def wiringPiI2CSetupInterface(*args):
  return _wiringIO.wiringPiI2CSetupInterface(*args)
wiringPiI2CSetupInterface = _wiringIO.wiringPiI2CSetupInterface

def wiringPiI2CSetup(*args):
  return _wiringIO.wiringPiI2CSetup(*args)
wiringPiI2CSetup = _wiringIO.wiringPiI2CSetup

def wiringPiI2CRead(*args):
  return _wiringIO.wiringPiI2CRead(*args)
wiringPiI2CRead = _wiringIO.wiringPiI2CRead

def wiringPiI2CReadReg8(*args):
  return _wiringIO.wiringPiI2CReadReg8(*args)
wiringPiI2CReadReg8 = _wiringIO.wiringPiI2CReadReg8

def wiringPiI2CReadReg16(*args):
  return _wiringIO.wiringPiI2CReadReg16(*args)
wiringPiI2CReadReg16 = _wiringIO.wiringPiI2CReadReg16

def wiringPiI2CWrite(*args):
  return _wiringIO.wiringPiI2CWrite(*args)
wiringPiI2CWrite = _wiringIO.wiringPiI2CWrite

def wiringPiI2CWriteReg8(*args):
  return _wiringIO.wiringPiI2CWriteReg8(*args)
wiringPiI2CWriteReg8 = _wiringIO.wiringPiI2CWriteReg8

def wiringPiI2CWriteReg16(*args):
  return _wiringIO.wiringPiI2CWriteReg16(*args)
wiringPiI2CWriteReg16 = _wiringIO.wiringPiI2CWriteReg16

def softToneCreate(*args):
  return _wiringIO.softToneCreate(*args)
softToneCreate = _wiringIO.softToneCreate

def softToneWrite(*args):
  return _wiringIO.softToneWrite(*args)
softToneWrite = _wiringIO.softToneWrite

def softServoWrite(*args):
  return _wiringIO.softServoWrite(*args)
softServoWrite = _wiringIO.softServoWrite

def softServoSetup(*args):
  return _wiringIO.softServoSetup(*args)
softServoSetup = _wiringIO.softServoSetup

def softPwmCreate(*args):
  return _wiringIO.softPwmCreate(*args)
softPwmCreate = _wiringIO.softPwmCreate

def softPwmWrite(*args):
  return _wiringIO.softPwmWrite(*args)
softPwmWrite = _wiringIO.softPwmWrite

def mcp23s17Setup(*args):
  return _wiringIO.mcp23s17Setup(*args)
mcp23s17Setup = _wiringIO.mcp23s17Setup

def mcp23017Setup(*args):
  return _wiringIO.mcp23017Setup(*args)
mcp23017Setup = _wiringIO.mcp23017Setup

def mcp23s08Setup(*args):
  return _wiringIO.mcp23s08Setup(*args)
mcp23s08Setup = _wiringIO.mcp23s08Setup

def mcp23008Setup(*args):
  return _wiringIO.mcp23008Setup(*args)
mcp23008Setup = _wiringIO.mcp23008Setup

def sr595Setup(*args):
  return _wiringIO.sr595Setup(*args)
sr595Setup = _wiringIO.sr595Setup

def lcdHome(*args):
  return _wiringIO.lcdHome(*args)
lcdHome = _wiringIO.lcdHome

def lcdClear(*args):
  return _wiringIO.lcdClear(*args)
lcdClear = _wiringIO.lcdClear

def lcdSendCommand(*args):
  return _wiringIO.lcdSendCommand(*args)
lcdSendCommand = _wiringIO.lcdSendCommand

def lcdPosition(*args):
  return _wiringIO.lcdPosition(*args)
lcdPosition = _wiringIO.lcdPosition

def lcdPutchar(*args):
  return _wiringIO.lcdPutchar(*args)
lcdPutchar = _wiringIO.lcdPutchar

def lcdPuts(*args):
  return _wiringIO.lcdPuts(*args)
lcdPuts = _wiringIO.lcdPuts

def lcdPrintf(*args):
  return _wiringIO.lcdPrintf(*args)
lcdPrintf = _wiringIO.lcdPrintf

def lcdInit(*args):
  return _wiringIO.lcdInit(*args)
lcdInit = _wiringIO.lcdInit
class nes(object):
  def setupNesJoystick(self,*args):
    return setupNesJoystick(*args)
  def readNesJoystick(self,*args):
    return readNesJoystick(*args)

class Serial(object):
  device = '/dev/ttyAMA0'
  baud = 9600
  serial_id = 0
  def printf(self,*args):
    return serialPrintf(self.serial_id,*args)
  def dataAvail(self,*args):
    return SerialAvailable(self.serial_id,*args)
  def getchar(self,*args):
    return SerialRead(self.serial_id,*args)
  def putchar(self,*args):
    return SerialWrite(self.serial_id,*args)
  def puts(self,*args):
    return SerialPrint(self.serial_id,*args)
  def __init__(self,device,baud):
    self.device = device
    self.baud = baud
    self.serial_id = SerialBegin(self.device,self.baud)
  def __del__(self):
    SerialEnd(self.serial_id)

class I2C(object):
  def setupInterface(self,*args):
  	return wiringPiI2CSetupInterface(*args)
  def setup(self,*args):
    return wiringPiI2CSetup(*args)
  def read(self,*args):
    return wiringPiI2CRead(*args)
  def readReg8(self,*args):
    return wiringPiI2CRead(*args)
  def readReg16(self,*args):
    return wiringPiI2CReadReg16(*args)
  def write(self,*args):
    return wiringPiI2CWrite(*args)
  def writeReg8(self,*args):
    return wiringPiI2CWriteReg8(*args)
  def writeReg16(self,*args):
    return wiringPiI2CWriteReg16(*args)

class GPIO(object):
  WPI_MODE_PINS = 0
  WPI_MODE_GPIO = 1
  WPI_MODE_GPIO_SYS = 2
  WPI_MODE_PHYS = 3
  WPI_MODE_PIFACE = 4
  WPI_MODE_UNINITIALISED = -1

  INPUT = 0
  OUTPUT = 1
  PWM_OUTPUT = 2
  PULLUP = 3
  PULLDOWN = 4
  PULLOFF = 5
  CHECK = 6
  GPIO_CLOCK = 8

  LOW = 0
  HIGH = 1

  PUD_OFF = 0
  PUD_DOWN = 1
  PUD_UP = 2

  PWM_MODE_MS = 0
  PWM_MODE_BAL = 1

  INT_EDGE_SETUP = 0
  INT_EDGE_FALLING = 1
  INT_EDGE_RISING = 2
  INT_EDGE_BOTH = 3

  LSBFIRST = 0
  MSBFIRST = 1

  MODE = 0
  def __init__(self,pinmode=0):
    self.MODE=pinmode
    if pinmode==self.WPI_MODE_PINS:
      wiringPiSetup()
    if pinmode==self.WPI_MODE_GPIO:
      wiringPiSetupGpio()
    if pinmode==self.WPI_MODE_GPIO_SYS:
      wiringPiSetupSys()
    if pinmode==self.WPI_MODE_PHYS:
      wiringPiSetupPhys()
    if pinmode==self.WPI_MODE_PIFACE:
      wiringPiSetupPiFace()

  def delay(self,*args):
    delay(*args)
  def delayMicroseconds(self,*args):
    delayMicroseconds(*args)
  def millis(self):
    return millis()
  def micros(self):
    return micros()

  def piHiPri(self,*args):
    return piHiPri(*args)

  def piBoardRev(self):
    return piBoardRev()
  def wpiPinToGpio(self,*args):
    return wpiPinToGpio(*args)
  def setPadDrive(self,*args):
    return setPadDrive(*args)
  def getAlt(self,*args):
    return getAlt(*args)
  def digitalWriteByte(self,*args):
    return digitalWriteByte(*args)

  def pwmSetMode(self,*args):
    pwmSetMode(*args)
  def pwmSetRange(self,*args):
    pwmSetRange(*args)
  def pwmSetClock(self,*args):
    pwmSetClock(*args)
  def gpioClockSet(self,*args):
    gpioClockSet(*args)
  def pwmWrite(self,*args):
    pwmWrite(*args)

  def pinMode(self,*args):
    pinMode(*args)

  def digitalWrite(self,*args):
    digitalWrite(*args)
  def digitalRead(self,*args):
    return digitalRead(*args)
  def digitalWriteByte(self,*args):
    digitalWriteByte(*args)

  def analogWrite(self,*args):
    analogWrite(*args)
  def analogRead(self,*args):
    return analogRead(*args)

  def shiftOut(self,*args):
    shiftOut(*args)
  def shiftIn(self,*args):
    return shiftIn(*args)

  def pullUpDnControl(self,*args):
    return pullUpDnControl(*args)

  def waitForInterrupt(self,*args):
    return waitForInterrupt(*args)
  def wiringPiISR(self,*args):
    return wiringPiISR(*args)

  def softPwmCreate(self,*args):
    return softPwmCreate(*args)
  def softPwmWrite(self,*args):
    return sofPwmWrite(*args)

  def softToneCreate(self,*args):
    return softToneCreate(*args)
  def softToneWrite(self,*args):
    return softToneWrite(*args)

  def lcdHome(self,*args):
    return lcdHome(self,*args)
  def lcdCLear(self,*args):
    return lcdClear(self,*args)
  def lcdSendCommand(self,*args):
    return lcdSendCommand(self,*args)
  def lcdPosition(self,*args):
    return lcdPosition(self,*args)
  def lcdPutchar(self,*args):
    return lcdPutchar(self,*args)
  def lcdPuts(self,*args):
    return lcdPuts(self,*args)
  def lcdPrintf(self,*args):
    return lcdPrintf(self,*args)
  def lcdInit(self,*args):
    return lcdInit(self,*args)

# This file is compatible with both classic and new-style classes.

cvar = _wiringIO.cvar

